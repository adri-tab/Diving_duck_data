library(tidyverse)
library(dbplyr)
library(ggvis)
library(mapview)
library(sf)
library(lubridate)
library(rpostgis)
library(readxl)
library(suncalc)

# switch from Rstudio to browser (viewer=null)
op_viewer_default <- getOption('viewer')

# Fichier Capture ---------------------------------------------------------

# lecture du fichier capture
cap <- read_delim('./Data/Maves_VHF_2003-2007/Capture Lievres-CMV officielle.csv',delim=';',locale=locale(encoding = 'Latin1'))

# en maj les variables qui vont changer
names(cap) <- c("nom_ind_original", "sexe", "date", "TYPE_OBSERVATION", "reference_zone_secteur", "lieu_dit", 
                "poids_g", "longueur_crane_mm", "maturite_palpation", "frequence_vhf_khz", 
                "num_presadom_gauche", "num_presadom_droit", "couleur_masse_gauche", "couleur_masse_droit", 
                "couleurs_top_tag_gauche", "couleurs_top_tag_droit", "lactation", "gestation", 
                "testicules_sortis", "MORT", "remarque_obs", "prelevement_anticorps", 
                "prelevement_genetique", "prelevement_buccal", "prelevement_anticorps_ebhs", "heure", 
                "mode_capture", "CULTURE", "hauteur_vegetation_cm", "attitude")

cap %>% filter(nom_ind_original%in%nom_ind_original[is.na(date)])

# on met la date de fin le lendemain du dernier suivi
cap <- cap %>% mutate(date=case_when((is.na(date)&nom_ind_original==46)~'14/10/2003',
                                     (is.na(date)&nom_ind_original==87)~'05/10/2003',
                                     (is.na(date)&nom_ind_original==100)~'21/07/2004',
                                     (is.na(date)&nom_ind_original==281)~'03/06/2005',
                                     (is.na(date)&nom_ind_original==380)~'23/07/2005',
                                     TRUE~date) %>% 
                        dmy)

cap %>% select(date) %>% summary
# ok toutes les lignes ont une date

# HEURE
cap %>% ggplot(aes(x=heure)) + geom_histogram() + facet_wrap(~TYPE_OBSERVATION)
cap %>% split(.$TYPE_OBSERVATION) %>% map(~sum(is.na(.x$heure)))
cap %>% split(.$TYPE_OBSERVATION) %>% map(~seconds_to_period(mean(.x$heure, na.rm = T)))

# ok on met les valeurs au début de la période la plus probable
cap <- cap %>% 
  mutate(heure=case_when(is.na(heure) ~ parse_time('06:00:00'),
                         TRUE ~ heure),
         date_heure=ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris'))

cap %>% count(TYPE_OBSERVATION)

# indiv comme pour le suivi
cap <- cap %>% 
  rowwise() %>% 
  mutate(nom_ind_original=str_c('CMV-', str_c(rep("0",3-nchar(nom_ind_original)),collapse=''),
                                                           as.character(nom_ind_original))) %>% ungroup

# ok pour Sexe
cap %>% count(sexe)
cap <- cap %>% mutate(sexe=case_when(sexe=='F'~'Femelle',
                                     sexe=='M'~'Mâle',
                                     sexe=='I'~'Indéterminé',
                                     TRUE ~ 'Non Renseigné'))

# type capture
cap %>% count(TYPE_OBSERVATION)

# lièvre sans "capture" ni "problème"
list(
  cap %>% select(nom_ind_original, TYPE_OBSERVATION) %>% 
    filter(TYPE_OBSERVATION%in%c('Capture','Problème')) %>% 
    group_by(nom_ind_original) %>% 
    summarise(count=n()),
  cap %>% 
    select(nom_ind_original) %>% 
    unique) %>% 
  reduce(full_join) %>% 
  filter(is.na(count)|count!=1)

# modif "capture" pour le pb car "recpature" au lieu de "capture"
cap %>% filter(nom_ind_original=='CMV-430')
cap <- cap %>%  mutate(TYPE_OBSERVATION=if_else(nom_ind_original=='CMV-430'&TYPE_OBSERVATION=='Recapture',
                                                'Capture',TYPE_OBSERVATION))

# qd probleme, fin de suivi, correspond uniquement a des captures donc facile a transformer
cap %>% filter(nom_ind_original%in%.$nom_ind_original[.$TYPE_OBSERVATION=='Problème'])

# modif classe type_observation
type_obs <- tibble(initial=c("Capture", "CHASSE", "Collier", "Mort", "Perdu", "Problème", "Recapture", "Route"),
                   type_observation=c('Capture','Reprise','Reprise','Reprise','Disparition','Capture','Recapture','Reprise'),
                   vivant=c(TRUE,FALSE,FALSE,FALSE,NA,FALSE,TRUE,FALSE),
                   cause_mort=c(NA,'Chasse','Protocole','Indéterminé',NA,'Protocole',NA,'Collision'),
                   precision_mort=c(NA,'Non Renseigné','Collier (étranglement, …)','Indéterminé',NA,'Cage',NA,'Route'))

cap <- cap %>% left_join(type_obs,by=c('TYPE_OBSERVATION'='initial')) %>% select(-TYPE_OBSERVATION)

# check
cap %>% filter(is.na(type_observation))

# remarque_obs
# on vire les accents en passant en ASCII et on précise la cause de mort si info dans pred
cap %>% 
  mutate(PRED=str_to_lower(iconv(remarque_obs, from= 'UTF-8', to='ASCII//TRANSLIT'))) %>% 
  filter(cause_mort=='Indéterminé'&!str_detect(PRED,'indeter')) %>% 
  select(PRED,cause_mort,precision_mort) %>% 
  data.frame

cap <- cap %>% 
  mutate(PRED=str_to_lower(iconv(remarque_obs, from= 'UTF-8', to='ASCII//TRANSLIT'))) %>% 
  # on vire les chaines qui pourraient planter le truc
  mutate(PRED=str_replace(PRED,'pas preda|pas de pred|stresse par pred|retrouve sans tete a qq m du piege. traces pred.',
                          'REMOVED'))  %>% 
  # on ajoute les bonnes données
  mutate(cause_mort=case_when(str_detect(PRED,'pred|carn')~'Prédation',
                              str_detect(PRED,'ecrazparengin agri')~'Collision',
                              TRUE~cause_mort),
         precision_mort=case_when(str_detect(PRED,'renard|remard')~'Renard',
                                  str_detect(PRED,'ecrazparengin agri')~'Engin agricole',
                                  str_detect(PRED,'corneille')~'Corneille',
                                  TRUE~precision_mort)) %>% 
  select(-PRED)

# zone et lieu dit ok
cap %>% select(reference_zone_secteur:lieu_dit) %>% map(table, useNA = 'ifany')
cap <- cap %>% 
  mutate(reference_zone_secteur=if_else(reference_zone_secteur%in%c('Z','HZ'),'hors zone', reference_zone_secteur))

#poids
cap %>% ggvis(~poids_g) %>% layer_histograms()
cap <- cap %>% mutate(poids_g = as.double(poids_g), 
                      poids_g = case_when(poids_g > 10000 ~ poids_g/10,
                                          TRUE ~ poids_g) %>% as.integer)

# lecture du fichier suivi

cap <- cap %>% 
  mutate(longueur_crane_mm = case_when(str_detect(longueur_crane_mm, 
                                                  str_c(letters, collapse= '|')) == T ~ NA_character_,
                                       is.na(longueur_crane_mm) ~ NA_character_,
                                       TRUE ~ longueur_crane_mm),
         longueur_crane_mm = longueur_crane_mm %>% str_replace(',', '.') %>% parse_double %>% round(2))


cap %>% filter(nom_ind_original=='CMV-393')

# MATURITE
cap %>% count(maturite_palpation)
cap <- cap %>% mutate(maturite_palpation = case_when(maturite_palpation=='A' ~ 'Adulte',
                                                     maturite_palpation=='J' ~ 'Juvénile',
                                                     maturite_palpation=='I' ~ 'Indéterminé',
                                                     TRUE ~ 'Non Renseigné'))

# FREQUENCE, warning parfois plusieurs fréquence par indiv
cap %>% select(frequence_vhf_khz) %>% table(useNA = 'ifany')
cap <- cap %>% 
  mutate(frequence_vhf_khz = if_else(frequence_vhf_khz=='147414(420)', '147414', frequence_vhf_khz) %>% 
           parse_integer)

cap %>% 
  select(nom_ind_original,frequence_vhf_khz) %>% 
  unique %>%
  split(.$nom_ind_original) %>% 
  map(~tibble(unique(.x$nom_ind_original),count=sum(!is.na(.x$frequence_vhf_khz)))) %>% 
  bind_rows %>% 
  count(count)

indiv <- cap %>% 
  select(nom_ind_original,frequence_vhf_khz) %>% 
  unique %>%
  split(.$nom_ind_original) %>% 
  map(~tibble(nom_ind_original = unique(.x$nom_ind_original),count = sum(!is.na(.x$frequence_vhf_khz)))) %>% 
  bind_rows %>% filter(count>1) %>% pull(nom_ind_original)

# on n'en prendra qu'une, celle lors de la Capture donc ok
cap %>% filter(nom_ind_original%in%indiv) %>% select(nom_ind_original, date, type_observation)

# num presadom, il y a des chiffres et des lettres donc on laisse flex
cap %>% select(num_presadom_gauche:num_presadom_droit) %>% map(table, useNA='ifany')

# on homogeneise seulement en capital letters
cap <- cap %>% mutate(num_presadom_gauche=str_to_upper(num_presadom_gauche),
                      num_presadom_droit=str_to_upper(num_presadom_droit))

# COULEUR MASSE & TOP_TAG, gros chantier, on homogénéise tout
cap %>% select(couleur_masse_gauche:couleurs_top_tag_droit) %>% map(table,useNA='ifany')
couleur <- c('orange','rouge','blanc','bleu','jaune','noir','vert','rose')

fun_detect <- function(x){
  unlist(lapply(str_split(x,'[- ,]+')[[1]],function(y)y[!y%in%couleur]))
}

vec_to_modify <- cap %>% select(couleur_masse_gauche:couleurs_top_tag_droit) %>% unlist %>% 
  as.vector %>% map(fun_detect) %>% unlist %>% unique %>% tibble %>% filter(!is.na(.))

vec_to_modify <- vec_to_modify %>% mutate(new=c('rouge','','blanc','orange','orange','bleu','vert','jaune','blanc','orange','orange','blanc','blanc','bleu','blanc','jaune','blanc','vert','vert'))

fun_replace <- function(x){
  tmp <- unlist(lapply(str_split(x,'[- ,]+')[[1]],
                       function(y)if_else(y%in%vec_to_modify$.,vec_to_modify$new[match(y,vec_to_modify$.)],y)))
  str_c(tmp[tmp!=''],collapse = '-')
}

cap <- cap %>% mutate_at(vars(couleur_masse_gauche:couleurs_top_tag_droit),fun_replace)

# Lactation (1 seul 1) to mort
cap %>% select(c(lactation:testicules_sortis,prelevement_anticorps:prelevement_anticorps_ebhs)) %>% map(table,useNA='ifany')
cap <- cap %>% mutate_at(vars(c(lactation:testicules_sortis,prelevement_anticorps:prelevement_anticorps_ebhs)),
                         function(x){as.logical(if_else(x==1,TRUE,FALSE))})

# Mort check
cap %>% select(MORT, type_observation) %>% table(useNA = 'ifany')

cap <- cap %>% select(-MORT)

# remarque
cap %>% count(remarque_obs, sort=T) %>% data.frame

# mode_capture
cap %>% count(mode_capture)
cap <- cap %>% mutate(mode_capture='Non Renseigné')

# CULTURE on s'en fout sauf pour les manquant dans dat
cap %>% count(CULTURE, sort=T)

# HAUTEUR_CULTURE
cap %>% select(hauteur_vegetation_cm) %>% table(useNA = 'ifany')

# attitude
cap %>% select(attitude) %>% table(useNA = 'ifany')
cap %>% filter(attitude=='échappé') %>% data.frame
cap <- cap %>% mutate(attitude=case_when(attitude=='calme'~'Calme',
                                         attitude=='excité'~'Excité',
                                         TRUE~'Non Renseigné'))

# croisement entre type capture, mort et etat, a réordonner
cap <- cap %>% 
  arrange(nom_ind_original,date,heure,date_heure) %>% 
  mutate(id_cap=seq(nrow(cap))) %>% 
  select(id_cap, date, heure, date_heure, nom_ind_original, type_observation, vivant, 
         cause_mort, precision_mort, lieu_dit, reference_zone_secteur, remarque_obs, attitude, everything(), -CULTURE,hauteur_vegetation_cm) %>% 
  ungroup

# Fichier Suivi -----------------------------------------------------------

dat <- read_delim('./Data/Maves_VHF_2003-2007/All_individus_CMV_L93_modified.txt',
                  delim=';',
                  locale = locale(encoding = 'Latin1'))

dat <- dat %>% rename(date=DATE,heure=HEURE,hauteur_vegetation_cm=HAUTEUR_CM,
                      remarque_obs=OBSERVATION,nom_ind_original=INDIVIDU,lon=XCOORD_L93,lat=YCOORD_L93)

nrow(dat)

# ID chronologie?
dat%>%select(ID)%>%table
dat%>%select(ID,nom_ind_original)%>%table
dat <- dat %>% select(-ID)

# vérification du format DATE, on vire qd absence de date? modifié dans fichier source
bad <- dat%>%filter(nchar(dat$date)!=10)%>%select(date)%>%data.frame
dat <- dat%>%mutate(date=if_else(date%in%bad,NA_character_,date))
dat <- dat%>%mutate(date = dmy(date))
dat %>% filter(is.na(date))
# ok toutes les lignes ont une date
dat %>% select(date) %>% summary
# pb au niveau de la date "2025", on verra ca plus tard au moment de la confrontation avec le fichier capture

# vérification de la durée de suivi pour valeurs aberrentes
duration <- dat %>% group_by(nom_ind_original) %>% 
  summarise(duration = as.integer(diff(range(date))))
duration %>% ggvis( ~ duration) %>% layer_histograms()
duration %>% arrange(desc(duration))

# isolement de l'individu et modif
dat%>%filter(.,nom_ind_original=="CMV-435")
dat <- dat%>%mutate(date=case_when(date=='2025-10-12'~'2005-10-12',
                                   TRUE~as.character(date)) %>% ymd)
duration <- dat%>%group_by(nom_ind_original)%>%summarise(duration=as.integer(diff(range(date))))
duration%>%ggvis(~duration)%>%layer_histograms()

dat%>%select(date)%>%summary

# Activite
dat %>% count(ACTIVITE)

dat <- dat %>% 
  mutate(vivant=case_when(ACTIVITE%in%c("mort","MORT")~FALSE,
                          ACTIVITE%in%c("DISPARU")~NA,
                          TRUE~TRUE),
         type_observation=case_when(ACTIVITE%in%c("mort","MORT")~"Reprise",
                                    ACTIVITE%in%c("capture","CAPTURE")~"Capture",
                                    ACTIVITE%in%c("RECAPTURE")~"Recapture",
                                    ACTIVITE%in%c("DISPARU")~"Disparition",
                                    TRUE~"Détection"))

table(dat %>% select(ACTIVITE, vivant), useNA = 'ifany')
table(dat %>% select(ACTIVITE, type_observation),useNA = 'ifany')

dat <- dat %>% select(-ACTIVITE)

# check heure
dat %>% group_by(nom_ind_original) %>% summarise(count=n(),wrong=n()-sum(!is.na(heure))) %>% data.frame
dat %>% select(heure) %>% unique %>% arrange(heure) %>% data.frame

# HEURE
dat %>% ggplot(aes(x=heure)) + geom_histogram() + facet_wrap(~type_observation)
dat %>% split(.$type_observation) %>% map(~sum(is.na(.x$heure)))
dat %>% split(.$type_observation) %>% map(~seconds_to_period(mean(.x$heure, na.rm = T)))

# ok on met les valeurs au début de la période la plus probable
# et on définit la zone horaire 
OlsonNames()
dat <- dat %>% 
  mutate(heure=case_when(is.na(heure) ~ parse_time('06:00:00'),
                         TRUE ~ heure),
         date_heure=ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris'))

dat %>% pull(date_heure) %>% tz

# on ordonne pour faire des verifs sur les données
dat <- dat %>% arrange(nom_ind_original) %>%
  group_by(nom_ind_original) %>%
  arrange(date_heure,.by_group=T) %>% ungroup()

# vérification que la capture est présente et première datetime
tmp <- dat %>%
  group_by(nom_ind_original) %>%
  summarise(capture=sum(type_observation=='Capture'),first=first(type_observation)=='Capture') %>% 
  data.frame

# check modif cleaned
tmp %>% filter(capture==0|first==F)
dat %>% filter(nom_ind_original %in%
                 c(tmp %>% filter(capture==0|first==F) %>% pull(nom_ind_original))) %>% data.frame

# si il y a des bugs, on check les séries
tmp2 <- read_sf("./Data/Maves_VHF_2003-2007/inutilisé/All_individus_CMV_L93.shp")
tmp2 %>% filter(HAUTEUR_CM==40 & DATE=='2004-08-29') %>% data.frame


dat %>% filter(nom_ind_original%in%(tmp2 %>% 
                                      filter(HAUTEUR_CM==40 & DATE=='2004-08-29') %>% 
                                      pull(INDIVIDU)), 
               date=='2004-08-29') %>% 
  data.frame

# on vire la ligne vu que c'est une détection inconnue
dat <- dat %>% filter(!is.na(nom_ind_original))

# verification pas d'obs après mort ou disparu, 0 pose pb
dat %>% group_by(nom_ind_original) %>% 
  summarise(first=first(type_observation),
            last=last(type_observation), 
            mid=sum(type_observation[-c(1,length(type_observation))]%in%c('Capture','Reprise','Disparition'))) %>% 
  data.frame

#catégorie HAUTEUR_VEGETATION
dat %>% pull(hauteur_vegetation_cm) %>% unique 

#on extrait les nombre et on sort une moyenne 
dat <- dat %>% rowwise() %>% 
  mutate(hauteur_vegetation_cm=as.double(str_match_all(hauteur_vegetation_cm, "[0-9]+") %>% 
                                              unlist %>% as.double %>% mean)) %>% ungroup

# catégorie INDIVIDU
dat %>% group_by(nom_ind_original) %>% summarise(count=n(),date=date[1]) %>% data.frame

# catégorie NATURE
dat <- dat %>% mutate(NATURE=str_to_lower(iconv(NATURE, from= 'UTF-8', to='ASCII//TRANSLIT')))
dat %>% count(NATURE,sort=T) %>% data.frame

# modif pour bonne detection
abbr <- c('co','ch','to','lb','bl','po')
full_names <- c('colza','chaume','tounesol','labour','ble','pois') 
dat <- dat %>% mutate(NATURE=if_else(NATURE%in%abbr, full_names[match(NATURE,abbr)], NATURE))

dat %>% count(NATURE, sort=T) %>% data.frame

etat_culture <- read_rds('./Data/Maves_VHF_2003-2007/nettoyage_cultures/etat_culture.rds')
vegetation <- read_rds('./Data/Maves_VHF_2003-2007/nettoyage_cultures/vegetation.rds')

str_detection <- c(etat_culture %>% unnest %>% pull(str_detection) %>% .[!is.na(.)], 
                   vegetation %>% unnest %>% pull(str_detection) %>% .[!is.na(.)])

dat %>% select(NATURE) %>% unique %>% filter(!str_detect(NATURE,str_c(str_detection,collapse='|')))

dat <- dat %>% mutate(NATURE=if_else(str_detect(NATURE,str_c(str_detection,collapse='|')),
                                     NATURE,
                                     NA_character_))

dat <- dat %>% mutate(pk_observation=seq(nrow(dat)))

milieu <- dat %>% mutate(hab=str_split(dat$NATURE,'[/+]')) %>% 
  select(pk_observation,hauteur_vegetation_cm,hab,NATURE) %>% unnest

#_ rajouter pk_milieu dans ce script
culture <- milieu %>% 
  mutate(vege = if_else(is.na(hab),'',hab)) %>% 
  mutate(vege_detect = map(hab,
                           function(x){
                             map_lgl(vegetation %>% split(.$pk_vegetation),
                                     function(y){
                                       x %>% str_detect(str_c(unlist(y$str_detection),collapse = '|')) %>% ifelse(is.na(.),FALSE,.)
                                     })
                           })) %>% 
  # on remplace les chaines détectées pour pas que chemin soit détecté en chaume par exemple
  mutate(new_hab = map2_chr(vege,vege_detect,
                            ~ifelse(any(.y),
                                    .x %>% str_replace_all(str_c(vegetation %>% filter(.y) %>% pull(str_detection) %>% unlist,collapse = '|'),''),
                                    .x))) %>% 
  mutate(etat_detect = map(new_hab,
                           function(x){
                             tmp = map_lgl(etat_culture %>% split(.$pk_etat_culture),
                                           function(y){ 
                                             x %>% str_detect(str_c(y %>% pull(str_detection) %>% unlist,collapse = '|')) %>% ifelse(is.na(.),FALSE,.)
                                           })
                             #pour virer la detection de chaume alors qu'il y a déchaume de detecter
                             if(all(rev(tmp)[1:2])){tmp[length(tmp)]=FALSE}
                             return(tmp)
                           })) %>% 
  mutate(vegetation = map(vege_detect,~if(any(.x)){vegetation[.x,] %>% select(-str_detection)}else{
    vegetation[1,] %>% select(-str_detection)}),
    etat_culture = map(etat_detect,~if(any(.x)){etat_culture[.x,] %>% select(-str_detection)}else{
      etat_culture[1,] %>% select(-str_detection)}),
    nb_vege = map_int(vegetation,nrow),
    nb_etat = map_int(etat_culture,nrow),
    nb_milieu = map2_int(vegetation,etat_culture,~max(c(nrow(.x),nrow(.y)))))

# parfois plusieurs vege, ou plusieurs etats
culture %>% filter(nb_milieu>1)

# mais jamais les deux... donc juste à multiplier l'un des deux
culture %>% filter(nb_vege>1&nb_etat>1)

# il faut dupliquer les lignes qd nb_milieu < lignes
culture <- culture %>% mutate(vegetation=map2(vegetation,nb_etat,~if(.y>1){.x[rep(1,.y),]}else{.x}),
                              etat_culture=map2(etat_culture,nb_vege,~if(.y>1){.x[rep(1,.y),]}else{.x}))

# on met sur pied qd on a seulement la culture
culture <- culture %>% 
  select(-vege_detect, -etat_detect) %>% 
  unnest %>% 
  mutate(etat_culture = if_else(libelle == 'Non Renseigné' & 
                                  famille_vegetation %in% c('Céréale', 'Graminée autre', 
                                                            'Autre', 'Oléagineuse', 'Protéagineuse', 
                                                            'Tubercule/ Bulbe/ Cucurbitacée'),
                                'Sur pied', libelle))

# on prepare les tables finales
met_vegetation <- culture %>% 
  select(pk_observation, vegetation, description_originale=NATURE)

met_etat_culture <- culture %>% 
  select(pk_observation, etat_culture, description_originale=NATURE)

met_milieu <- culture %>% 
  mutate(pk_milieu = 1:nrow(.),
         hauteur_vegetation_cm = round(hauteur_vegetation_cm)) %>% 
  select(pk_milieu, fk_observation=pk_observation, fk_vegetation=pk_vegetation, 
         fk_etat_culture=pk_etat_culture, hauteur_vegetation_cm, description_originale=NATURE)

#check sutr les sorties complexes
met_vegetation %>% count(pk_observation) %>% filter(n>2)
met_vegetation %>% filter(pk_observation%in%c(2290,2707))
met_etat_culture %>% filter(pk_observation%in%c(2290,2707))

# ordination des variables
dat <- dat %>% 
  select(pk_observation, nom_ind_original, date, heure, date_heure, lon, lat, type_observation, remarque_obs, vivant)

# confrontation des tables ------------------------------------------------

# on regarde dans l'intersection des tables si pas de doublons 
test_doublons <- dat %>% inner_join(cap, by=c('nom_ind_original','type_observation'))

test_doublons <- test_doublons %>% select(id_cap, pk_observation, nom_ind_original, type_observation,
                                          vivant.x, vivant.y, date.x, date.y, 
                                          heure.x, heure.y, date_heure.x, date_heure.y)

# check des doublons
test_doublons %>% count(id_cap) %>% filter(n>1)
test_doublons %>% count(pk_observation) %>% filter(n>1)

# on regarde si on a des bonnes correspondances des dates 
test_doublons_date <- test_doublons %>% filter(date.x!=date.y)
valid_date <- c('x','y','x','x','x','y','x','x','x','y','y')
# correction
corr <- test_doublons_date %>% mutate( 
  date_true=if_else(valid_date=='x',date.x,date.y), 
  heure_true=if_else(valid_date=='x',heure.x,heure.y),
  date_heure_true=if_else(valid_date=='x',date_heure.x, date_heure.y)) %>% 
  select(id_cap, pk_observation, date_true, heure_true, date_heure_true)

dat <- dat %>% 
  left_join(corr %>% select(-id_cap), by='pk_observation') %>% 
  mutate(date=if_else(!is.na(date_true),date_true,date),
         heure=if_else(!is.na(heure_true),heure_true,heure),
         date_heure=if_else(!is.na(date_heure_true),date_heure_true,date_heure)) %>% 
  select(-date_true,-heure_true,-date_heure_true)

cap <- cap %>% 
  left_join(corr %>% select(-pk_observation), by='id_cap') %>% 
  mutate(date=if_else(!is.na(date_true),date_true,date),
         heure=if_else(!is.na(heure_true),heure_true,heure),
         date_heure=if_else(!is.na(date_heure_true),date_heure_true,date_heure)) %>% 
  select(-date_true,-heure_true,-date_heure_true)

# on regarde si on a des bonnes correspondances des heures, on prend la table dat car plus fiable
test_doublons_heure <- test_doublons %>% filter(heure.x!=heure.y)

# correction
corr <- test_doublons_heure %>% 
  select(id_cap, pk_observation, heure_true=heure.x)

dat <- dat %>% 
  left_join(corr %>% select(-id_cap), by='pk_observation') %>% 
  mutate(heure=if_else(!is.na(heure_true),heure_true,heure),
         date_heure=ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris')) %>% 
  select(-heure_true)

cap <- cap %>% 
  left_join(corr %>% select(-pk_observation), by='id_cap') %>% 
  mutate(heure=if_else(!is.na(heure_true),heure_true,heure),
         date_heure=ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris')) %>% 
  select(-heure_true)

# données présentes dans cap mais pas dans dat
# check si la table capture est complete
cap_add <- dat %>% 
  filter(type_observation!='Détection') %>% 
  anti_join(cap,by=c('nom_ind_original','date_heure','type_observation'))

cap %>% filter(nom_ind_original%in%(cap_add %>% pull(nom_ind_original))) %>% data.frame

# il manque une reprise, on l'ajoute et on précise la cause de reprise
cap <- cap %>% full_join(cap_add %>% 
                           select(nom_ind_original, date, heure, date_heure, type_observation, vivant) %>% 
                           mutate(cause_mort='Chasse', precision_mort = 'Non Renseigné'))

# données présentes dans dat mais pas dans cap
# check si la table dat est complete: non car tous les non suivis n'y sont pas, donc on ajoute, et bcp de reprises aussi
cap %>% 
  anti_join(dat,by=c('nom_ind_original','date_heure','type_observation')) %>% 
  select(nom_ind_original, type_observation, vivant) %>% data.frame

dat_add <- cap %>% 
  anti_join(dat,by=c('nom_ind_original','date_heure','type_observation')) %>% 
  select(nom_ind_original, date, heure, date_heure, type_observation, vivant)

dat <- dat %>% full_join(dat_add)

# arrange and last check de 1 unique capture en premier par indiv
dat <- dat %>% arrange(nom_ind_original,date_heure)
cap <- cap %>% arrange(nom_ind_original,date_heure)

checking_list <- dat %>% 
  split(.$nom_ind_original) %>% 
  map( ~ tibble(nom_ind_original = unique(.x$nom_ind_original),
                capture_check = if_else(first(.x$type_observation) == 'Capture' &
                                          all(.x$type_observation[-1] != 'Capture'), TRUE, FALSE),
                last_check = last(.x$type_observation),
                reprise_check = case_when(all(.x$type_observation != 'Reprise') ~ TRUE,
                                          last(.x$type_observation) == 'Reprise' & 
                                            all(.x$type_observation[-nrow(.x)] != 'Reprise') ~ TRUE,
                                          TRUE ~ FALSE),
                disparition_check = case_when(all(.x$type_observation != 'Disparition') ~ TRUE,
                                              last(.x$type_observation) == 'Disparition' & 
                                                all(.x$type_observation[-nrow(.x)] != 'Disparition') ~ TRUE,
                                              TRUE ~ FALSE),
                detection1_check = if_else(first(.x$type_observation)=='Détection' , FALSE, TRUE),
                detection2_check = if_else(last(.x$type_observation)=='Détection' , FALSE, TRUE))) %>% 
  bind_rows

checking_list %>% filter(capture_check==F)
checking_list %>% filter(reprise_check==F)
checking_list %>% filter(disparition_check==F)
checking_list %>% filter(detection1_check==F)
checking_list %>% filter(detection2_check==F)
# check, ok sauf pour cmv-392, donc modif, des fois seulement detection à la fin, mais pas grave

dat %>% filter(nom_ind_original=='CMV-392')
dat <- dat %>% 
  mutate(date = if_else(nom_ind_original == 'CMV-392' & type_observation == 'Reprise', 
                        ymd('2005-07-26'), date),
         date_heure = ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris')) %>% 
  arrange(nom_ind_original, date_heure)

cap <- cap %>% 
  mutate(date = if_else(nom_ind_original == 'CMV-392' & type_observation == 'Reprise', 
                        ymd('2005-07-26'), date),
         date_heure = ymd_hms(str_c(date, heure, sep='T'), tz='Europe/Paris')) %>% 
  arrange(nom_ind_original, date_heure)

# check si détection, on a bien un vhf associé
detect <- dat %>% filter(type_observation=='Détection') %>% pull(nom_ind_original) %>% unique
cap %>% filter(is.na(frequence_vhf_khz) & type_observation=='Capture' & nom_ind_original %in% detect)

cap <- cap %>% 
  mutate(frequence_vhf_khz = if_else(nom_ind_original=='CMV-399' & type_observation=='Capture', 
                                     as.integer(147245), frequence_vhf_khz))

# pourquoi certains numéros d'indiv n'apparaissent pas dans les captures?
index <- cap %>% mutate(nom=-parse_number(nom_ind_original)) %>% 
  pull(nom) %>% unique %>% diff %>% (function(x)which(x>1))

cap %>% mutate(nom=-parse_number(nom_ind_original)) %>% pull(nom) %>% unique %>% .[index]+1
# suite à check des cahiers: ok --> ce sont des id donnes par erreur a des recaptures, on a bien toutes les captures

# mise en forme des tables finales ----------------------------------------
# on refait les id pour que ca match bien avec culture et pas de NA
cap <- cap %>% mutate(id_cap = 1:nrow(.))
dat <- dat %>% rename(id_old = pk_observation) %>% 
  mutate(pk_observation=1:nrow(.))

met_milieu <- met_milieu %>% 
  left_join(dat %>% select(id_old, pk_observation), by= c('fk_observation'='id_old')) %>% 
  select(-fk_observation) %>% 
  rename(fk_observation = pk_observation) %>% 
  select(pk_milieu, fk_observation, everything())

dat <- dat %>% select(-id_old)

# commandes utiles: http://www.win-vector.com/blog/2016/02/using-postgresql-in-r/
getSQL <- dget('./Code/functions_own.R') %>% pluck('getSQL')
utf8_transfo <- dget('./Code/functions_own.R') %>% pluck('utf8_transfo')

con <- dbConnect(PostgreSQL(),
                 dbname = "petite_faune_sedentaire",
                 host = "localhost",
                 port = 5432,
                 user = "postgres",
                 password = rstudioapi::askForPassword("Mot de passe PFS ?"))

# con <- dbConnect(PostgreSQL(), 
#                  dbname = "portail_oncfs",
#                  host = "192.168.4.9", 
#                  port = 5438,
#                  user = "adm.lievre", 
#                  password = "M@sterL!3vr3")


# schemas <- dbGetQuery(con, "SELECT nspname FROM pg_catalog.pg_namespace") %>% 
#   mutate(id = 1:nrow(.)) %>% filter(id>id[nspname=='public']) %>% pull(nspname)

schemas <- c('rec_lievre', 'ref_oncfs')
                                                                       
base_str <- schemas %>% 
  tibble(schema = .) %>% 
  mutate(table = map(schema, 
                     ~ {dbGetQuery(con, 
                                   str_c("select * from pg_tables where schemaname='", .x, "';")) %>% 
                         pull(tablename)})) %>% 
  unnest %>% 
  mutate(schema.table = str_c(schema, table, sep='.')) %>% 
  mutate(attrib = map2(schema, table, ~ dbListFields(con, c(.x, .y))))

deroul <- base_str %>% 
  filter(table %>% str_detect('dic')) %>%
  mutate(deroul = map2(schema, table, ~ tbl(con, in_schema(.x, .y)) %>% collect %>% utf8_transfo))

##############################################
############## WARNING #######################
##############################################

#on ecrase la campagnes et toutes celles d'apres
dbGetQuery(con, 'DELETE FROM rec_lievre.met_campagne WHERE pk_campagne >= 1')

# campagne
attrib <- base_str %>% pull(attrib) %>% set_names(base_str %>% pull(table) %>% unique)

attrib %>% pluck('met_campagne')
met_campagne <- tibble(1, 3, '2154', 'Europe/Paris', ymd('2003-06-13'), ymd('2006-11-01'), 
                       'Maves - Beauce', 
                       'dispersion des juvéniles',
                       "attention, il y a souvent plusieurs cultures associées à une observation, attention aux doublons lors des requêtes - Quelques heures de captures et de reprises sont mises arbitrairement aux heures les plus probables") %>% 
  set_names(attrib %>% pluck('met_campagne'))

# individu
attrib %>% pluck('met_individu')
met_individu <- cap %>% filter(type_observation=='Capture') %>% 
  select(nom_ind_original, frequence_vhf_khz) %>% 
  mutate(suivi_individuel = if_else(is.na(frequence_vhf_khz), FALSE, TRUE)) %>% 
  mutate(pk_individu = 1: nrow(.), fk_campagne = 1, date_naissance_estim = date(NA)) %>% 
  select(pk_individu, fk_campagne, nom_ind_original, suivi_individuel, date_naissance_estim) 

# observation
attrib %>% pluck('met_observation')
met_observation <- dat %>% 
  left_join(cap %>% select(nom_ind_original, type_observation, date_heure, reference_zone_secteur)) %>% 
  left_join(met_individu %>% select(fk_individu = pk_individu, nom_ind_original)) %>% 
  select(-nom_ind_original) %>% 
  left_join(deroul %>% filter(table == 'dic_type_obs') %>% pull(deroul) %>% pluck(1), 
            by = c('type_observation'='libelle')) %>% 
  select(-type_observation) %>% rename(fk_type_obs = pk_type_obs) %>% 
  mutate(num_obs_original = NA_integer_, 
         fk_departement = '41', 
         fk_commune = '41130', 
         lieu_dit = NA_character_, 
         reference_parcelle = NA_character_,
         temperature_celcius = NA_real_,
         meteo = NA_character_, 
         heure = as.character(heure)) %>% 
  st_as_sf(coords = c('lon', 'lat'), crs=2154, na.fail = FALSE) %>% 
  select(pk_observation, fk_individu, num_obs_original, date_obs = date, heure_obs = heure, 
         geometry, fk_type_obs, fk_departement, fk_commune, lieu_dit, reference_parcelle, 
         reference_zone_secteur, temperature_celcius, meteo, remarque_obs) %>% 
  rename(geom = geometry)

tmp <- bind_cols(
  met_observation %>% 
    select(pk_observation, date = date_obs, heure = heure_obs) %>% 
    mutate(date_heure = str_c(date, heure, sep = 'T') %>% ymd_hms(tz ='Europe/Paris')) %>% 
    st_set_geometry(NULL) %>% as_tibble,
  met_observation %>% 
    st_transform(4326) %>% st_coordinates %>% 
    as_tibble %>% select(lat = Y, lon = X)) %>% 
  filter(!is.na(lon) & !is.na(lat))

tmp <- tmp %>% select(date, lon, lat) %>% 
  getSunlightTimes(data = ., 
                   keep = c("sunrise", "sunset"),
                   tz = "Europe/Paris") %>% as_tibble %>% 
  bind_cols(tmp %>% select(-c(date, lon, lat))) %>% 
  rename(soleil_levant = sunrise, soleil_couchant = sunset) %>% 
  mutate(nuit = if_else(date_heure > soleil_levant & date_heure < soleil_couchant, FALSE, TRUE),
         soleil_levant = soleil_levant %>% as.character %>% str_split(' ') %>% 
           map_chr( ~ .x %>% '['(2)) %>% parse_time,
         soleil_couchant = soleil_couchant %>% as.character %>% str_split(' ') %>% 
           map_chr( ~ .x %>% '['(2)) %>% parse_time) %>% 
  select(pk_observation, soleil_levant, soleil_couchant, nuit)

met_observation <- met_observation %>% left_join(tmp)

# milieu 
attrib %>% pluck('met_milieu')
met_milieu <- met_milieu %>% 
  mutate(hauteur_vegetation_cm = if_else(is.na(hauteur_vegetation_cm), 
                                         NA_real_, 
                                         round(hauteur_vegetation_cm)) %>% 
           as.integer)

# capture
attrib %>% pluck('met_capture')
met_capture <- cap %>% 
  filter(type_observation %in% c('Capture','Recapture')) %>% 
  left_join(met_individu %>% select(fk_individu = pk_individu, nom_ind_original)) %>% 
  select(-nom_ind_original) %>% 
  left_join(deroul %>% filter(table == 'dic_type_obs') %>% pull(deroul) %>% pluck(1), 
            by = c('type_observation' = 'libelle')) %>% 
  rename(fk_type_obs = pk_type_obs) %>% 
  left_join(met_observation %>% select(fk_individu, fk_type_obs, fk_observation = pk_observation) %>% 
              st_set_geometry(NULL)) %>% 
  mutate(type_materiel = 'VHF') %>% 
  left_join(deroul %>% filter(table == 'dic_materiel') %>% pull(deroul) %>% pluck(1) %>% 
              select(fk_materiel = pk_materiel, libelle), by = c('type_materiel' = 'libelle')) %>% 
  mutate(num_emetteur_gps = NA_character_) %>% 
  left_join(deroul %>% filter(table == 'dic_sexe') %>% pull(deroul) %>% pluck(1), 
            by = c('sexe' = 'libelle')) %>% 
  select(-sexe) %>% rename(fk_sexe = pk_sexe) %>% 
  left_join(deroul %>% filter(table == 'dic_maturite_palpation') %>% pull(deroul) %>% pluck(1), 
            by = c('maturite_palpation' = 'libelle')) %>% 
  select(-maturite_palpation) %>% rename(fk_maturite_palpation = pk_maturite_palpation) %>% 
  left_join(deroul %>% filter(table == 'dic_attitude') %>% pull(deroul) %>% pluck(1), 
            by = c('attitude' = 'libelle')) %>% 
  select(-attitude) %>% rename(fk_attitude = pk_attitude) %>% 
  mutate(pk_capture = 1:nrow(.), 
         fk_mode_capture = 1,
         fuite = case_when(is.na(remarque_obs) ~ FALSE,
                           str_detect(remarque_obs, 'chappé') ~ TRUE,
                           TRUE ~ FALSE),
         largeur_crane_mm = NA_real_,
         longueur_oreille_mm = NA_real_,
         longueur_pied_arriere_mm = NA_real_,
         num_presadom_unique = NA_character_) %>% 
  select(pk_capture, fk_observation, fk_mode_capture, vivant, fuite, fk_materiel, num_emetteur_gps, 
         frequence_vhf_khz, fk_sexe, fk_maturite_palpation, poids_g, longueur_crane_mm, largeur_crane_mm, 
         longueur_oreille_mm, longueur_pied_arriere_mm, fk_attitude, num_presadom_unique, num_presadom_gauche,
         num_presadom_droit, couleur_masse_gauche, couleur_masse_droit, couleurs_top_tag_gauche, 
         couleurs_top_tag_droit, lactation, gestation, testicules_sortis, prelevement_anticorps, 
         prelevement_anticorps_ebhs, prelevement_buccal, prelevement_genetique)

# detection
attrib %>% pluck('met_detection')
met_detection <- met_observation %>% filter(fk_type_obs == 7) %>% 
  select(fk_observation = pk_observation) %>% st_set_geometry(NULL) %>% 
  mutate(pk_detection =1:nrow(.),
         duree_acquisition_s = NA_integer_,
         etat_batterie_principale = NA_real_,
         etat_batterie_secondaire = NA_real_) %>% 
  select(pk_detection, fk_observation, etat_batterie_principale, etat_batterie_secondaire)

# reprise
attrib %>% pluck('met_mortalite')
met_mortalite <- cap %>% filter(vivant == FALSE) %>%
  select(type_observation, cause_mort, precision_mort, nom_ind_original) %>% 
  left_join(met_individu %>% select(fk_individu = pk_individu, nom_ind_original)) %>% 
  select(-nom_ind_original) %>% 
  left_join(deroul %>% filter(table == 'dic_type_obs') %>% pull(deroul) %>% pluck(1), 
            by = c('type_observation' = 'libelle')) %>% 
  rename(fk_type_obs = pk_type_obs) %>% 
  left_join(met_observation %>% select(fk_individu, fk_type_obs, fk_observation = pk_observation) %>% st_set_geometry(NULL)) %>%
  left_join(deroul %>% filter(table == 'dic_cause_mort') %>% pull(deroul) %>% pluck(1), 
            by = c('cause_mort' = 'libelle')) %>%
  rename(fk_cause_mort = pk_mort) %>% 
  left_join(deroul %>% filter(table == 'dic_precision_mort') %>% pull(deroul) %>% pluck(1), 
            by = c('precision_mort' = 'libelle')) %>%
  rename(fk_precision_mort = pk_precision_mort) %>% 
  mutate(pk_mortalite = 1:nrow(.), 
         poids_cristallin_mg = NA_integer_, 
         num_fiche_sagir = NA_integer_) %>% 
  select(pk_mortalite, fk_observation, fk_cause_mort, fk_precision_mort, poids_cristallin_mg, num_fiche_sagir)

RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_campagne"), met_campagne, row.names = F, append = T)  
RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_individu"), met_individu, row.names = F, append = T)  
st_write(dsn = con, layer = c("rec_lievre", "met_observation"), obj = met_observation, append = T)
RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_milieu"), met_milieu, row.names = F, append = T)  
RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_capture"), met_capture, row.names = F, append = T)  
RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_detection"), met_detection, row.names = F, append = T)  
RPostgreSQL::dbWriteTable(con, c("rec_lievre", "met_mortalite"), met_mortalite, row.names = F, append = T)  

dbDisconnect(con)
